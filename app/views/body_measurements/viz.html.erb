<!DOCTYPE html>
<meta charset="utf-8">
<style>

body {
  font: 10px sans-serif;
}

.axis path,
.axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}

.x.axis path {
  display: none;
}

.line {
  fill: none;
  stroke: steelblue;
  stroke-width: 1.5px;
}

.line2 {
  fill: none;
  stroke: green;
  stroke-width: 1.5px;
}


</style>
<body>
<script src="http://d3js.org/d3.v3.js"></script>
<script>

var margin = {top: 20, right: 20, bottom: 30, left: 50},
    width = 930 - margin.left - margin.right,
    height = 500 - margin.top - margin.bottom;

var parseDate = d3.time.format("%Y-%m-%d").parse;

var x = d3.time.scale()
    .range([0, width]);

var yWeight = d3.scale.linear()
    .range([height, 0]);

var yBf = d3.scale.linear()
    .range([height, 0]);

var xAxis = d3.svg.axis()
    .scale(x)
    .orient("bottom");

var yAxisWeight = d3.svg.axis()
    .scale(yWeight)
    .orient("left");

var yAxisBf = d3.svg.axis()
    .scale(yBf)
    .orient("right");


var lineWeight = d3.svg.line()
    .x(function(d) { return x(d.measurementDate); })
    .y(function(d) { return yWeight(d.weight); });

var lineBf = d3.svg.line()
    .x(function(d) { return x(d.measurementDate); })
    .y(function(d) { return yBf(d.bodyFat); });


var svg = d3.select("body").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

d3.json("../body_measurements.json", function(error, data) {
  data.forEach(function(d) {
    d.measurementDate = parseDate(d.measurementDate);
  });

  x.domain(d3.extent(data, function(d) { return d.measurementDate; }));
  yWeight.domain(d3.extent(data, function(d) { return d.weight; }));
  yBf.domain(d3.extent(data, function(d) { return d.bodyFat; }));


  svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis);

  svg.append("g")
      .attr("class", "y axis")
      .call(yAxisWeight)
    .append("text")
      .attr("transform", "rotate(-90)")
      .attr("y", 6)
      .attr("dy", ".71em")
      .style("text-anchor", "end")
      .text("Weight");

  svg.append("g")
      .attr("class", "y axis axisRight")
      .attr("transform","translate(" + (width + 0) + ",0)")
      .call(yAxisBf)
    .append("text")
      .attr("transform", "rotate(90)")
      .attr("y", 6)
      .attr("dy", ".71em")
      .attr("x", 55)
      .style("text-anchor", "end")
      .text("Body Fat %");


  svg.append("path")
      .datum(data)
      .attr("class", "line")
      .attr("d", lineWeight);

  svg.append("path")
      .datum(data)
      .attr("class", "line2")
      .attr("d", lineBf);

});

</script>
<h1>BodyMeasurements#viz</h1>
<p>Find me in app/views/body_measurements/viz.html.erb</p>
